//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clases
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using Clases;
    using System.ComponentModel;
    
    public partial class C_Usuario
    {
        public C_Usuario()
        {
            this.C_Extra = new HashSet<C_Extra>();
            this.C_Movimiento = new HashSet<C_Movimiento>();
            this.C_Perdida = new HashSet<C_Perdida>();
        }

        conexion con;

        public string tipo { get; set; }
        public int idUsuario { get; set; }
        public string nombre { get; set; }
        public string apellido { get; set; }
        public string login { get; set; }
        public string clave { get; set; }
        public Nullable<int> nivel { get; set; }
        public Nullable<int> activo { get; set; }

        public int autenticar(string pUsuario, string pClave)
        {
            try
            {
                if (con == null)
                    con = new conexion();
                con.conectar();
                SqlCommand cmd = new SqlCommand("_sp_login", con.cnxn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@usuario", pUsuario);
                cmd.Parameters.AddWithValue("@clave", pClave);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        idUsuario = dr.GetInt32(0);
                        nombre = dr.GetString(1).Trim(new char[] { ' ' }); ;
                        apellido = dr.GetString(2).Trim(new char[] { ' ' }); ;
                        login = dr.GetString(3).Trim(new char[] { ' ' });
                        clave = dr.GetString(4).Trim(new char[] { ' ' }); ;
                        nivel = dr.GetInt32(5);
                        activo = dr.GetInt32(6);
                    }
                    con.desconectar();
                    return 1;

                }
                else
                {
                    con.desconectar();
                    return 0;
                }
            }
            catch
            {
                return 2;
            }

        }

        public List<C_Usuario> listarUsuario()
        {
            List<C_Usuario> usuarios = new List<C_Usuario>();
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_listarUsuarios", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                while (dr.Read())
                {
                    C_Usuario user = new C_Usuario();
                    user.idUsuario = dr.GetInt32(0);
                    user.nombre = dr.GetString(1).Trim(new char[] { ' ' }); ;
                    user.apellido = dr.GetString(2).Trim(new char[] { ' ' }); ;
                    user.login = dr.GetString(3).Trim(new char[] { ' ' });
                    user.clave = dr.GetString(4).Trim(new char[] { ' ' });
                    user.nivel = dr.GetInt32(5);
                    user.activo = dr.GetInt32(6);
                    usuarios.Add(user);
                }
            }
            con.desconectar();
            return usuarios;
        }

        #region MÉTODOS DE VALIDACIÓN PARA EVITAR LOGIN REPETIDOS (INSERCIÓN Y MODIFICACIÓN)
        public int existeLogin()
        {
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_existeLogin", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@login", login);
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                con.desconectar();
                return 1;
            }
            else
            {
                con.desconectar();
                return 0;
            }
        }

        public int existeLogin2()
        {
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_existeLogin2", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@login", login);
            cmd.Parameters.AddWithValue("@id", idUsuario);
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                con.desconectar();
                return 1;
            }
            else
            {
                con.desconectar();
                return 0;
            }
        }

        #endregion

        public List<C_Usuario> BuscarUsuarios(string valor)
        {
            List<C_Usuario> list = new List<C_Usuario>();
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_buscarUsuarios", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@buscar", valor);
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                while (dr.Read())
                {
                    C_Usuario nodo = new C_Usuario();
                    nodo.idUsuario = dr.GetInt32(0);
                    nodo.nombre = dr.GetString(1).Trim(new char[] { ' ' }); ;
                    nodo.apellido = dr.GetString(2).Trim(new char[] { ' ' });
                    nodo.login = dr.GetString(3).Trim(new char[] { ' ' });
                    nodo.clave = dr.GetString(4).Trim(new char[] { ' ' });
                    nodo.nivel = dr.GetInt32(5);
                    nodo.activo = dr.GetInt32(6);
                    list.Add(nodo);
                }
            }
            con.desconectar();
            return list;
        }

        public int NuevoUsuario()
        {
            try
            {
                if (con == null)
                    con = new conexion();
                con.conectar();
                SqlCommand cmd = new SqlCommand("_sp_nuevoUsuario", con.cnxn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@nombre", nombre.ToUpper());
                cmd.Parameters.AddWithValue("@apellido", apellido.ToUpper());
                cmd.Parameters.AddWithValue("@login", login.ToUpper());
                cmd.Parameters.AddWithValue("@pass", clave);
                cmd.Parameters.AddWithValue("@nivel", nivel);
                cmd.Parameters.AddWithValue("@estado", activo);
                cmd.ExecuteNonQuery();
                con.desconectar();
                return 1;
            }
            catch
            {
                con.desconectar();
                return 0;
            }
        }

        public int EditarUsuario()
        {
            try
            {
                if (con == null)
                    con = new conexion();
                con.conectar();
                SqlCommand cmd = new SqlCommand("sp_mod_Usuario", con.cnxn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@id", idUsuario);
                cmd.Parameters.AddWithValue("@nombre", nombre.ToUpper());
                cmd.Parameters.AddWithValue("@apellido", apellido.ToUpper());
                cmd.Parameters.AddWithValue("@login", login.ToUpper());
                cmd.Parameters.AddWithValue("@pass", clave);
                cmd.Parameters.AddWithValue("@nivel", nivel);
                cmd.Parameters.AddWithValue("@estado", activo);
                cmd.ExecuteNonQuery();
                con.desconectar();
                return 1;
            }
            catch
            {
                con.desconectar();
                return 0;
            }
        }
    
        public virtual ICollection<C_Extra> C_Extra { get; set; }
        public virtual ICollection<C_Movimiento> C_Movimiento { get; set; }
        public virtual ICollection<C_Perdida> C_Perdida { get; set; }
    }
}
