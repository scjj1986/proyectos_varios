//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clases
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using Clases;
    using System.ComponentModel;
    
    public partial class C_Usuario
    {
        conexion con;
        public int iduser { get; set; }
        public string cedula { get; set; }
        public string nombre { get; set; }
        public string apellido { get; set; }
        public string login { get; set; }
        public string pass { get; set; }
        public Nullable<int> nivel { get; set; }
        public string tipo{ get; set; }
        public Nullable<int> status { get; set; }
        public string estatus { get; set; }
        public string pregunta { get; set; }
        public string respuesta { get; set; }

        private bool _IsSelected = false;
        public bool IsSelected { get { return _IsSelected; } set { _IsSelected = value; OnChanged("IsSelected"); } }
        public Nullable<int> telemark { get; set; }

        //Método para agregar usuarios
        public int NuevoUsuario()
        {
            try
            {
                if (con == null)
                    con = new conexion();
                con.conectar();
                SqlCommand cmd = new SqlCommand("_sp_nuevoUsuario", con.cnxn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@documento", cedula);
                cmd.Parameters.AddWithValue("@nombre", nombre);
                cmd.Parameters.AddWithValue("@apellido", apellido);
                cmd.Parameters.AddWithValue("@login", login);
                cmd.Parameters.AddWithValue("@pass", pass);
                cmd.Parameters.AddWithValue("@nivel", nivel);
                cmd.Parameters.AddWithValue("@status",status);
                cmd.Parameters.AddWithValue("@pregunta", pregunta);
                cmd.Parameters.AddWithValue("@respuesta", respuesta);
                cmd.Parameters.AddWithValue("@tele", telemark);
                cmd.ExecuteNonQuery();
                con.desconectar();
                return 1;
            }
            catch
            {
                con.desconectar();
                return 0;
            }
        }
        //Método para listar usuarios
        public List<C_Usuario> listarUsuario()
        {
            List<C_Usuario> usuarios=new List<C_Usuario>();
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_listarUsuarios", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
             SqlDataReader dr = cmd.ExecuteReader();
             if (dr.HasRows)
             {
                 while (dr.Read())
                 {
                     C_Usuario user = new C_Usuario();
                     user.iduser=dr.GetInt32(0);
                     user.cedula = dr.GetString(1).Trim(new char[] {' '});
                     user.nombre = dr.GetString(2).Trim(new char[] { ' ' });
                     user.apellido = dr.GetString(3).Trim(new char[] { ' ' });
                     user.login = dr.GetString(4).Trim(new char[] { ' ' });
                     user.pass = dr.GetString(5).Trim(new char[] { ' ' });
                     user.nivel = dr.GetInt32(6);
                     user.status = dr.GetInt32(7);
                     user.pregunta = dr.GetString(8).Trim(new char[] { ' ' });
                     user.respuesta = dr.GetString(9).Trim(new char[] { ' ' });
                     user.telemark = (Convert.IsDBNull(dr["idTelemarketing"]) ? null : (int?)Convert.ToInt32(dr["idTelemarketing"]));
                     user.estatus = "";
                     usuarios.Add(user);
                 }                
             }
             con.desconectar();
             return usuarios;
        }

        public int existeDocIdentidad(string tipo,int pais,int tipoDoc)
        {
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_existeDocumento", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@tipo", tipo);
            cmd.Parameters.AddWithValue("@documento", cedula);
            cmd.Parameters.AddWithValue("@pais", pais);
            cmd.Parameters.AddWithValue("@td", tipoDoc);
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                con.desconectar();
                return 1;
            }
            else { 
                con.desconectar(); 
                return 0;
            }            
        }

        public int existeLogin()
        {
            if (con == null)
                con = new conexion();
            con.conectar();
            SqlCommand cmd = new SqlCommand("_sp_existeLogin", con.cnxn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@login", login);            
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                con.desconectar();
                return 1;
            }
            else
            {
                con.desconectar();
                return 0;
            }
        }

        public int autenticar(string pUsuario, string pClave)
        {
            try
            {
                if (con == null)
                    con = new conexion();
                con.conectar();
                SqlCommand cmd = new SqlCommand("_sp_login", con.cnxn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@usuario", pUsuario);
                cmd.Parameters.AddWithValue("@clave", pClave);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        iduser = dr.GetInt32(0); 
                        cedula = dr.GetString(1).Trim(new char[] { ' ' });
                        nombre = dr.GetString(2).Trim(new char[] { ' ' }); ;
                        apellido = dr.GetString(3).Trim(new char[] { ' ' }); ;
                        login = dr.GetString(4).Trim(new char[] { ' ' });
                        nivel = dr.GetInt32(6);
                        status = dr.GetInt32(7);
                        pregunta = dr.GetString(8).Trim(new char[] { ' ' }); 
                        respuesta = dr.GetString(9).Trim(new char[] { ' ' });
                        telemark = dr.GetInt32(10);
                    }
                    con.desconectar();
                    return 1;

                }
                else
                {
                    con.desconectar();
                    return 0;
                }
            }
            catch
            {
                return 2;
            }

        }

        public int editarUsuario()
        {
            try
            {
                if (con == null)
                    con = new conexion();
                con.conectar();
                SqlCommand cmd = new SqlCommand("_sp_editarUsuario", con.cnxn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@id", iduser);
                cmd.Parameters.AddWithValue("@status", status);
                cmd.Parameters.AddWithValue("@documento", cedula);
                cmd.Parameters.AddWithValue("@apellido", apellido);
                cmd.Parameters.AddWithValue("@nombre", nombre);
                cmd.Parameters.AddWithValue("@login", login);
                cmd.Parameters.AddWithValue("@nivel", nivel);
                SqlDataReader dr = cmd.ExecuteReader();
                con.desconectar();
                return 1;
            }
            catch
            {
                con.desconectar();
                return 0;
            }
        }

       #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnChanged(string prop)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(prop));
        }

        #endregion
    }
    
}
