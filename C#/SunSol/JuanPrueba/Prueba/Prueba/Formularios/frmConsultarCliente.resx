<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAtJV+ALagfwDFk3wAxZR/AMmVewDMmHkAzpx+AEx/qgBGgbMAUom4AFaLuQBkh6UAaYqpAAmE
        1gAVh9MAGZLeACaCxgA4hsQANpHOAASU7AAFofsAAqL+AAWk/wAWrf8AOqnnACu0+wAst/8AMbr/AEKI
        wQBAkMgAUJLGAFiSwwBSvfAASMX/AFjD9QBbzPwAXMz8AJCLigCTkI8Ar56EAK+ZmACbnqAAnJ6gAKGh
        oQCrrrEAtLKyALe1tADCkYEAxpWEAMqZgQDNm4AAxZaLAMaZiwDHmo0AyZuLAMSakgDGnZEAyZ+WAMeg
        jgDSoYIA1qaDANOjhwDbqoIA1KSIANeoiADIoZAAyqGXAMCgnQDIoJkAyKKcAM+smQDXtJsA572VAOO/
        mQDnvpgAzKegAM2qpQDQrqkA3L6jANi9uwDuwIoA8MKLAPDEjgD6zo8A7cefAPHJlQD5z5AA+dGTAP/U
        kgD/1ZQA+NKaAP/anwDawL4A7cigAO/TqQDu1K0A/NegAP/doQD+3acA99erAPzaqAD/3akA+9uuAP/f
        rADl0LQA7tizAPHZsQD02LcA+t62AP/iqgD/4q0A/+StAPfgsgD/4LIA/+axAP/itQD/5bYA/+m3AP/i
        uAD/5rsA/+W8AP/quAD/7b4AjrDOAMvNzgDbw8EAxs3VAP/pwQD/7sAA/+jFAPruxwD/7ccA/+vLAPnv
        ywD/7MgA/+vMAP/uzgD/8cQA//LKAP/0ygD/8c0A/vbPAP/u0gD+7tYA/u/ZAP/x0gD/9tEA//HUAP/1
        1QD/+NEA//rUAP/81gD/8t0A//3ZAP/15QD/9+oA//jtAP/58QD/+/YAAAAAAC8DAABQBAAAcAYAAJAJ
        AACwCgAAzwwAAPAOAAD/IBIA/z4xAP9cUQD/enEA/5eRAP+2sQD/1NEA////AAAAAAAvAA4AUAAXAHAA
        IQCQACsAsAA2AM8AQADwAEkA/xFaAP8xcAD/UYYA/3GcAP+RsgD/scgA/9HfAP///wAAAAAALwAgAFAA
        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
        AA///AA///8Af///4///////
</value>
  </data>
</root>